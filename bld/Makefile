.SUFFIXES: .F90 .o

extension = .F90

# Name of executable
EXE = ../exe/cvmix
# File containing information about compiler and netCDF (generated by ./setup)
ENV_FILE = .CVMix_env
# File containing information about whether or not the last build linked to
# netCDF (see below for more details)
INFO_FILE = .netcdf_info

COMPILE_FLAGS = -cpp -O2
LINKING_FLAGS =

# The variables FC, NETCDF_INC, NETCDF_LIB, and NETCDF_LINK are read in from
# CVMix_env. If the file doesn't exist, then the python script "setup" is run
# to generate the file.
ifeq ($(wildcard $(ENV_FILE)),)
  tmp := $(shell ./setup >&2)
endif
include $(ENV_FILE)

# If you build without netCDF and then decide you want to build with netCDF (or
# vice versa), you need to clean the old object files. The way this is handled
# is by storing whether the last compilation used netCDF or not in the hidden
# file .netcdf_info; whether the current built is using netCDF or not is stored
# in the variable NEW_NETCDF while the contents of .netcdf_info is stored in the
# variable OLD_NETCDF. The target "check" compares these two variables and runs
# make clean if they differ. If the file doesn't exist, the two variables are
# equal.
ifdef USE_NETCDF
  COMPILE_FLAGS += -D_NETCDF -I$(NETCDF_INC)
  LINKING_FLAGS += -L$(NETCDF_LIB) -lnetcdf
  # Check for netcdf4 library
  ifneq ($(wildcard $(NETCDF_LIB)/libnetcdff.a),)
    LINKING_FLAGS += -lnetcdff
  endif
  NEW_NETCDF = YES
else
  NEW_NETCDF = NO
endif

ifneq ($(wildcard $(INFO_FILE)),)
  OLD_NETCDF = $(shell cat $(INFO_FILE))
else
  OLD_NETCDF = $(NEW_NETCDF)
endif

ifneq ($(OLD_NETCDF), $(NEW_NETCDF))
  REBUILD = TRUE
endif


# ORDER MATTERS UNTIL I SET UP DEPENDENCIES
# Also, directories will change once we get a new repository
F_FILES = ../src/shared/vmix_kinds_and_types.F90 \
          ../src/shared/vmix_background.F90      \
          ../src/shared/vmix_convection.F90      \
          ../src/shared/vmix_put_get.F90         \
          ../src/vmix_output.F90                 \
          ../src/vmix_driver.F90

O_FILES = $(subst shared/,,$(subst ../src/,,$(F_FILES:$(extension)=.o)))

### TARGETS ###

.PHONY: check

all: vmix

# Possible executables: with and without netCDF
netcdf:
	$(MAKE) USE_NETCDF=TRUE

vmix: check $(O_FILES)
	$(FC) -o $(EXE) $(O_FILES) $(LINKING_FLAGS)
	$(shell echo $(NEW_NETCDF) > $(INFO_FILE))

# .o files -- until I can handle dependencies automatically, have to be specific
vmix_kinds_and_types.o: ../src/shared/vmix_kinds_and_types.F90
	$(FC) $(COMPILE_FLAGS) -c $< -o $@

vmix_background.o: ../src/shared/vmix_background.F90  \
                   ../src/shared/vmix_kinds_and_types.F90
	$(FC) $(COMPILE_FLAGS) -c $< -o $@

vmix_convection.o: ../src/shared/vmix_convection.F90  \
                   ../src/shared/vmix_kinds_and_types.F90
	$(FC) $(COMPILE_FLAGS) -c $< -o $@

vmix_put_get.o: ../src/shared/vmix_put_get.F90        \
                ../src/shared/vmix_kinds_and_types.F90
	$(FC) $(COMPILE_FLAGS) -c $< -o $@

vmix_output.o: ../src/vmix_output.F90                 \
               ../src/shared/vmix_kinds_and_types.F90
	$(FC) $(COMPILE_FLAGS) -c $< -o $@

vmix_driver.o: ../src/vmix_driver.F90                 \
               ../src/shared/vmix_kinds_and_types.F90 \
               ../src/shared/vmix_background.F90      \
               ../src/shared/vmix_convection.F90      \
               ../src/shared/vmix_put_get.F90         \
               ../src/vmix_output.F90
	$(FC) $(COMPILE_FLAGS) -c $< -o $@

# Utilities: check sees if we need to rebuild stand-alone components using
#            -D_NETCDF, clean is standard, distclean removes $ENV_FILE so you
#            will need to re-run setup
check:
	$(if $(REBUILD), rm -f vmix_output.o vmix_driver.o)

clean:
	/bin/rm -rf $(EXE) $(INFO_FILE) *.mod *.o

distclean: clean
	/bin/rm -rf $(ENV_FILE)
