.SUFFIXES: .F90 .o

extension = .F90

# Need CVMix root directory
# If using old version of make, pass in CVMIX_ROOT
ifeq ($(wildcard $(MAKEFILE_LIST)),)
  CVMIX_ROOT = ..
else
  ThisMakefile=$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
  ifeq (/,$(findstring /,$(ThisMakefile)))
    ThisDir=$(shell x=$(ThisMakefile) && echo $${x%/*})/
  endif
  CVMIX_ROOT = $(realpath $(ThisDir)..)
endif

# Directories needed by Makefile
LIB_DIR = $(CVMIX_ROOT)/lib
INC_DIR = $(CVMIX_ROOT)/include
BLD_DIR = $(CVMIX_ROOT)/bld
OBJ_DIR = $(BLD_DIR)/obj
SRC_DIR = $(CVMIX_ROOT)/src
SRC_DRIVE_DIR = $(SRC_DIR)/drivers
SRC_SHARED_DIR = $(SRC_DIR)/shared

# Name of executable
EXE = $(CVMIX_ROOT)/bin/cvmix

# File containing information about compiler (generated by $BLD_DIR/cvmix_setup)
ENV_FILE = $(BLD_DIR)/.CVMix_env

# File containing information about whether or not the last build linked to
# netCDF (see below for more details)
INFO_FILE = $(BLD_DIR)/.netcdf_info

ifeq ($(wildcard $(ENV_FILE)),)
  NEED_ENV_FILE = TRUE
else
  NEED_ENV_FILE = FALSE
  include $(ENV_FILE)
endif

# update FCFLAGS based on compiler
include $(BLD_DIR)/CompileFlags.mak
LINKING_FLAGS = -L$(LIB_DIR) -lcvmix

# If you build without netCDF and then decide you want to build with netCDF (or
# vice versa), you need to clean the cvmix_io and cvmix_driver object files.
# The way this is handled is by storing whether the last compilation used netCDF
# or not in the hidden file .netcdf_info; whether the current built is using
# netCDF or not is stored in the variable NEW_NETCDF while the contents of
# .netcdf_info is stored in the variable OLD_NETCDF. The target "check" compares
# these two variables and deletes the necessary object and module files  if they
# differ. If the file doesn't exist, the two variables are equal.
ifeq ($(USE_NETCDF),TRUE)
  ifeq ($(FC),xlf90)
    FCFLAGS += -WF,-D_NETCDF
  else
    FCFLAGS += -D_NETCDF
  endif
    FCFLAGS += -I$(NETCDF_INC)
  # Check for netcdf4 library
  ifeq ($(wildcard $(NETCDF_LIB)/libnetcdff.a),)
    LINKING_FLAGS += -L$(NETCDF_LIB) -lnetcdf
  else
    # with netcdf4, need to know whether to include hdf5 or not
    # That comes from $(NETCDF_LIB)/pkgconfig/netcdf.pc
    NETCDF_PC = $(NETCDF_LIB)/pkgconfig/netcdf.pc
    ifeq ($(wildcard $(NETCDF_PC)),)
      LINKING_FLAGS += -L$(NETCDF_LIB) -lnetcdff -lnetcdf
    else
      # get flibs from netcdf.pc
      FLIBS = $(subst flibs=,,$(shell grep flibs $(NETCDF_PC)))
      # Workaround for yellowstone, I need to figure out where this
      # @NC_FLIBS@ comes from
      ifeq ($(FLIBS),@NC_FLIBS@)
        FLIBS = -lnetcdf
      endif
      LINKING_FLAGS += -L$(NETCDF_LIB) $(FLIBS)
    endif
  endif
  NEW_NETCDF = YES
else
  NEW_NETCDF = NO
endif

# Need to include cvmix_kinds_and_types.mod from include (not from bld/obj)
FCFLAGS += -I$(INC_DIR)

ifneq ($(wildcard $(INFO_FILE)),)
  OLD_NETCDF = $(shell cat $(INFO_FILE))
else
  OLD_NETCDF = $(NEW_NETCDF)
endif

ifneq ($(OLD_NETCDF), $(NEW_NETCDF))
  REBUILD = TRUE
endif

# Dependencies: all drivers use cvmix_io
OBJS = cvmix_driver.o \
       cvmix_io.o
DRIVER_OBJS = cvmix_bgrnd_BL_pointer.o \
              cvmix_bgrnd_BL_memcopy.o \
              cvmix_shear_KPP.o        \
              cvmix_tidal_Simmons.o    \
              cvmix_ddiff_drv.o
ifeq ($(UCASE),TRUE)
  MODS_TMP = $(shell echo $(OBJS) | tr '[a-z]' '[A-Z]')
  MODS = ${MODS_TMP:.O=.mod}
else
  MODS = ${OBJS:.o=.mod}
endif

SHARED_TMP = cvmix_kinds_and_types.mod \
             cvmix_background.mod \
             cvmix_convection.mod \
             cvmix_ddiff.mod \
             cvmix_put_get.mod \
             cvmix_shear.mod \
             cvmix_tidal.mod

ifeq ($(UCASE),TRUE)
  SHARED_TMP2 = $(shell echo $(SHARED_TMP) | tr '[a-z]' '[A-Z]')
  SHARED_MODS = ${SHARED_TMP2:.MOD=.mod}
else
  SHARED_MODS = $(SHARED_TMP)
endif
SHR_MODS = $(addprefix $(INC_DIR)/,$(SHARED_MODS))

### TARGETS ###

.PHONY: check lib no_lib exe remove_exe clean libclean distclean

all: exe

# Possible executables: with and without netCDF
netcdf:
	$(MAKE) -f $(SRC_DIR)/Makefile USE_NETCDF=TRUE

$(EXE): $(OBJ_DIR)/cvmix_driver.o $(LIB_DIR)/libcvmix.a
	$(FC) -o $(EXE) $(addprefix $(OBJ_DIR)/,$(OBJS)) $(addprefix $(OBJ_DIR)/,$(DRIVER_OBJS)) $(LINKING_FLAGS)

exe: check $(ENV_FILE) lib
# If NEED_ENV_FILE is TRUE, the check target recursively calls make
# With NEED_ENV_FILE equal to FALSE, so the executable will be built
ifeq ($(NEED_ENV_FILE),FALSE)
	cd $(SRC_DIR); $(MAKE) $(EXE)
	$(shell echo $(NEW_NETCDF) > $(INFO_FILE))
endif

# Create all object and module files
$(OBJ_DIR)/cvmix_bgrnd_BL_pointer.o: $(OBJ_DIR)/cvmix_io.o \
                                     $(SHR_MODS) \
                                     $(SRC_DRIVE_DIR)/cvmix_bgrnd_BL_pointer.F90
	$(FC) $(FCFLAGS) -c $(SRC_DRIVE_DIR)/cvmix_bgrnd_BL_pointer.F90 -o $@

$(OBJ_DIR)/cvmix_bgrnd_BL_memcopy.o: $(OBJ_DIR)/cvmix_io.o \
                                     $(SHR_MODS) \
                                     $(SRC_DRIVE_DIR)/cvmix_bgrnd_BL_memcopy.F90
	$(FC) $(FCFLAGS) -c $(SRC_DRIVE_DIR)/cvmix_bgrnd_BL_memcopy.F90 -o $@

$(OBJ_DIR)/cvmix_tidal_Simmons.o: $(OBJ_DIR)/cvmix_io.o \
                                  $(SHR_MODS) \
                                  $(SRC_DRIVE_DIR)/cvmix_tidal_Simmons.F90
	$(FC) $(FCFLAGS) -c $(SRC_DRIVE_DIR)/cvmix_tidal_Simmons.F90 -o $@

$(OBJ_DIR)/cvmix_shear_KPP.o: $(OBJ_DIR)/cvmix_io.o \
                              $(SHR_MODS) \
                              $(SRC_DRIVE_DIR)/cvmix_shear_KPP.F90
	$(FC) $(FCFLAGS) -c $(SRC_DRIVE_DIR)/cvmix_shear_KPP.F90 -o $@

$(OBJ_DIR)/cvmix_ddiff_drv.o: $(OBJ_DIR)/cvmix_io.o \
                              $(SHR_MODS) \
                              $(SRC_DRIVE_DIR)/cvmix_ddiff_drv.F90
	$(FC) $(FCFLAGS) -c $(SRC_DRIVE_DIR)/cvmix_ddiff_drv.F90 -o $@

$(OBJ_DIR)/cvmix_driver.o: $(addprefix $(OBJ_DIR)/,$(DRIVER_OBJS)) \
                           $(SHR_MODS) \
                           $(SRC_DIR)/cvmix_driver.F90
	$(FC) $(FCFLAGS) -c $(SRC_DIR)/cvmix_driver.F90 -o $@

$(OBJ_DIR)/cvmix_io.o: $(SRC_DIR)/cvmix_io.F90 \
                       $(SHR_MODS)
	$(FC) $(FCFLAGS) -c $(SRC_DIR)/cvmix_io.F90 -o $@

lib:
ifeq ($(NEED_ENV_FILE),FALSE)
	cd $(SRC_SHARED_DIR) ; $(MAKE)
endif

# Utilities:
# 1) check determines if output needs to be rebuilt with (or without) 
#    netcdf
# 2) remove_exe deletes the executable to ensure the proper file is built
# 3) clean deletes object and module files, as well as the netcdf info file
# 4) libclean also removes lib/libcvmix.a include/*.mod so you will need to
#    rebuild the library.
# 5) distclean also removes $ENV_FILE so you will need to re-run cvmix_setup
check:
# The variables FC, NETCDF_INC, NETCDF_LIB, and NETCDF_LINK are read in from
# CVMix_env. If the file doesn't exist, then the python script "cvmix_setup"
# is run to generate the file.
	$(if $(REBUILD), rm -f $(addprefix $(OBJ_DIR)/,cvmix_io.o $(DRIVER_OBJS)))

$(ENV_FILE):
# After building the ENV_FILE, must invoke make again to read it in. Note that
# the cvmix target only builds if NEED_ENV_FILE is FALSE, so after this build
# returns, the cvmix target won't do anything.
	@$(BLD_DIR)/cvmix_setup $(ENV_FILE)
	$(MAKE) -f $(SRC_DIR)/Makefile

remove_exe:
	/bin/rm -rf $(EXE)

clean: remove_exe
	/bin/rm -rf $(INFO_FILE) $(addprefix $(OBJ_DIR)/,$(MODS) $(OBJS) $(DRIVER_OBJS))

libclean: clean
	cd $(SRC_SHARED_DIR); $(MAKE) clean 

distclean: libclean
	/bin/rm -rf $(ENV_FILE)
